// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: manage2store.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponseCode int32

const (
	ResponseCode_SUCCESS  ResponseCode = 0
	ResponseCode_NOSEARCH ResponseCode = 1
	ResponseCode_ERROR    ResponseCode = 2
)

// Enum value maps for ResponseCode.
var (
	ResponseCode_name = map[int32]string{
		0: "SUCCESS",
		1: "NOSEARCH",
		2: "ERROR",
	}
	ResponseCode_value = map[string]int32{
		"SUCCESS":  0,
		"NOSEARCH": 1,
		"ERROR":    2,
	}
)

func (x ResponseCode) Enum() *ResponseCode {
	p := new(ResponseCode)
	*p = x
	return p
}

func (x ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_manage2store_proto_enumTypes[0].Descriptor()
}

func (ResponseCode) Type() protoreflect.EnumType {
	return &file_manage2store_proto_enumTypes[0]
}

func (x ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseCode.Descriptor instead.
func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{0}
}

type ConfigType int32

const (
	ConfigType_JUDGMENT ConfigType = 0
	ConfigType_ALERT    ConfigType = 1
)

// Enum value maps for ConfigType.
var (
	ConfigType_name = map[int32]string{
		0: "JUDGMENT",
		1: "ALERT",
	}
	ConfigType_value = map[string]int32{
		"JUDGMENT": 0,
		"ALERT":    1,
	}
)

func (x ConfigType) Enum() *ConfigType {
	p := new(ConfigType)
	*p = x
	return p
}

func (x ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_manage2store_proto_enumTypes[1].Descriptor()
}

func (ConfigType) Type() protoreflect.EnumType {
	return &file_manage2store_proto_enumTypes[1]
}

func (x ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigType.Descriptor instead.
func (ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{1}
}

type AgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentID string `protobuf:"bytes,1,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
}

func (x *AgentRequest) Reset() {
	*x = AgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manage2store_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentRequest) ProtoMessage() {}

func (x *AgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manage2store_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentRequest.ProtoReflect.Descriptor instead.
func (*AgentRequest) Descriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{0}
}

func (x *AgentRequest) GetAgentID() string {
	if x != nil {
		return x.AgentID
	}
	return ""
}

type AgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=judgment2store.ResponseCode" json:"Code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Result string       `protobuf:"bytes,3,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *AgentResponse) Reset() {
	*x = AgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manage2store_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentResponse) ProtoMessage() {}

func (x *AgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manage2store_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentResponse.ProtoReflect.Descriptor instead.
func (*AgentResponse) Descriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{1}
}

func (x *AgentResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_SUCCESS
}

func (x *AgentResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AgentResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type MetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentID string `protobuf:"bytes,1,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
	Metric  string `protobuf:"bytes,2,opt,name=Metric,proto3" json:"Metric,omitempty"`
	Begin   int64  `protobuf:"varint,3,opt,name=Begin,proto3" json:"Begin,omitempty"`
	End     int64  `protobuf:"varint,4,opt,name=End,proto3" json:"End,omitempty"`
	Period  string `protobuf:"bytes,5,opt,name=Period,proto3" json:"Period,omitempty"`
}

func (x *MetricRequest) Reset() {
	*x = MetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manage2store_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricRequest) ProtoMessage() {}

func (x *MetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manage2store_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricRequest.ProtoReflect.Descriptor instead.
func (*MetricRequest) Descriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{2}
}

func (x *MetricRequest) GetAgentID() string {
	if x != nil {
		return x.AgentID
	}
	return ""
}

func (x *MetricRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *MetricRequest) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *MetricRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *MetricRequest) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

type MetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=judgment2store.ResponseCode" json:"Code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Timestamp int64        `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Metric    string       `protobuf:"bytes,4,opt,name=Metric,proto3" json:"Metric,omitempty"`
	Value     float32      `protobuf:"fixed32,5,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *MetricResponse) Reset() {
	*x = MetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manage2store_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricResponse) ProtoMessage() {}

func (x *MetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manage2store_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricResponse.ProtoReflect.Descriptor instead.
func (*MetricResponse) Descriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{3}
}

func (x *MetricResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_SUCCESS
}

func (x *MetricResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MetricResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MetricResponse) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *MetricResponse) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type AlertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AgentID string `protobuf:"bytes,2,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
	Begin   int64  `protobuf:"varint,3,opt,name=Begin,proto3" json:"Begin,omitempty"`
	End     int64  `protobuf:"varint,4,opt,name=End,proto3" json:"End,omitempty"`
	Level   int32  `protobuf:"varint,5,opt,name=Level,proto3" json:"Level,omitempty"`
	Metric  string `protobuf:"bytes,6,opt,name=Metric,proto3" json:"Metric,omitempty"`
}

func (x *AlertRequest) Reset() {
	*x = AlertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manage2store_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertRequest) ProtoMessage() {}

func (x *AlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manage2store_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertRequest.ProtoReflect.Descriptor instead.
func (*AlertRequest) Descriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{4}
}

func (x *AlertRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AlertRequest) GetAgentID() string {
	if x != nil {
		return x.AgentID
	}
	return ""
}

func (x *AlertRequest) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *AlertRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *AlertRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AlertRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

type AlertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=judgment2store.ResponseCode" json:"Code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	ID        int32        `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
	AgentID   string       `protobuf:"bytes,4,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
	Metric    string       `protobuf:"bytes,5,opt,name=Metric,proto3" json:"Metric,omitempty"`
	Value     float32      `protobuf:"fixed32,6,opt,name=Value,proto3" json:"Value,omitempty"`
	Threshold float32      `protobuf:"fixed32,7,opt,name=Threshold,proto3" json:"Threshold,omitempty"`
	Duration  string       `protobuf:"bytes,8,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Level     int32        `protobuf:"varint,9,opt,name=Level,proto3" json:"Level,omitempty"`
	Begin     int64        `protobuf:"varint,10,opt,name=Begin,proto3" json:"Begin,omitempty"`
}

func (x *AlertResponse) Reset() {
	*x = AlertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manage2store_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertResponse) ProtoMessage() {}

func (x *AlertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manage2store_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertResponse.ProtoReflect.Descriptor instead.
func (*AlertResponse) Descriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{5}
}

func (x *AlertResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_SUCCESS
}

func (x *AlertResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *AlertResponse) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AlertResponse) GetAgentID() string {
	if x != nil {
		return x.AgentID
	}
	return ""
}

func (x *AlertResponse) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *AlertResponse) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *AlertResponse) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *AlertResponse) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *AlertResponse) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AlertResponse) GetBegin() int64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ConfigType `protobuf:"varint,1,opt,name=Type,proto3,enum=judgment2store.ConfigType" json:"Type,omitempty"`
	ID   int32      `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	AgentID string     `protobuf:"bytes,3,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
	Method  string     `protobuf:"bytes,4,opt,name=Method,proto3" json:"Method,omitempty"`
	Config  string     `protobuf:"bytes,5,opt,name=Config,proto3" json:"Config,omitempty"` // JSON字符串，包含具体配置内容
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manage2store_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manage2store_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigRequest) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_JUDGMENT
}

func (x *ConfigRequest) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ConfigRequest) GetAgentID() string {
	if x != nil {
		return x.AgentID
	}
	return ""
}

func (x *ConfigRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ConfigRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=judgment2store.ResponseCode" json:"Code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Config string       `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"` // JSON字符串，包含具体配置内容
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_manage2store_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manage2store_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_manage2store_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigResponse) GetCode() ResponseCode {
	if x != nil {
		return x.Code
	}
	return ResponseCode_SUCCESS
}

func (x *ConfigResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ConfigResponse) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

var File_manage2store_proto protoreflect.FileDescriptor

var file_manage2store_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x6b,
	0x0a, 0x0d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22,
	0xa0, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x22, 0x91, 0x02, 0x0a, 0x0d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x6c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2a, 0x34, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x4f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x25, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x55, 0x44, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x10, 0x01, 0x32, 0x9e,
	0x07, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x64,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x64,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x64, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75, 0x64, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x6a,
	0x75, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x75,
	0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_manage2store_proto_rawDescOnce sync.Once
	file_manage2store_proto_rawDescData = file_manage2store_proto_rawDesc
)

func file_manage2store_proto_rawDescGZIP() []byte {
	file_manage2store_proto_rawDescOnce.Do(func() {
		file_manage2store_proto_rawDescData = protoimpl.X.CompressGZIP(file_manage2store_proto_rawDescData)
	})
	return file_manage2store_proto_rawDescData
}

var file_manage2store_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_manage2store_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_manage2store_proto_goTypes = []interface{}{
	(ResponseCode)(0),      // 0: judgment2store.ResponseCode
	(ConfigType)(0),        // 1: judgment2store.ConfigType
	(*AgentRequest)(nil),   // 2: judgment2store.AgentRequest
	(*AgentResponse)(nil),  // 3: judgment2store.AgentResponse
	(*MetricRequest)(nil),  // 4: judgment2store.MetricRequest
	(*MetricResponse)(nil), // 5: judgment2store.MetricResponse
	(*AlertRequest)(nil),   // 6: judgment2store.AlertRequest
	(*AlertResponse)(nil),  // 7: judgment2store.AlertResponse
	(*ConfigRequest)(nil),  // 8: judgment2store.ConfigRequest
	(*ConfigResponse)(nil), // 9: judgment2store.ConfigResponse
}
var file_manage2store_proto_depIdxs = []int32{
	0,  // 0: judgment2store.AgentResponse.Code:type_name -> judgment2store.ResponseCode
	0,  // 1: judgment2store.MetricResponse.Code:type_name -> judgment2store.ResponseCode
	0,  // 2: judgment2store.AlertResponse.Code:type_name -> judgment2store.ResponseCode
	1,  // 3: judgment2store.ConfigRequest.Type:type_name -> judgment2store.ConfigType
	0,  // 4: judgment2store.ConfigResponse.Code:type_name -> judgment2store.ResponseCode
	2,  // 5: judgment2store.ManageConfig.GetAllAgentInfo:input_type -> judgment2store.AgentRequest
	2,  // 6: judgment2store.ManageConfig.GetMetricsByAgentID:input_type -> judgment2store.AgentRequest
	4,  // 7: judgment2store.ManageConfig.GetMetricData:input_type -> judgment2store.MetricRequest
	6,  // 8: judgment2store.ManageConfig.GetAllAlertInfo:input_type -> judgment2store.AlertRequest
	6,  // 9: judgment2store.ManageConfig.GetAlertInfo:input_type -> judgment2store.AlertRequest
	6,  // 10: judgment2store.ManageConfig.DelAlterInfo:input_type -> judgment2store.AlertRequest
	8,  // 11: judgment2store.ManageConfig.AddConfig:input_type -> judgment2store.ConfigRequest
	8,  // 12: judgment2store.ManageConfig.UpdateConfigById:input_type -> judgment2store.ConfigRequest
	8,  // 13: judgment2store.ManageConfig.DeleteConfigById:input_type -> judgment2store.ConfigRequest
	8,  // 14: judgment2store.ManageConfig.GetConfig:input_type -> judgment2store.ConfigRequest
	8,  // 15: judgment2store.ManageConfig.GetAllConfigs:input_type -> judgment2store.ConfigRequest
	3,  // 16: judgment2store.ManageConfig.GetAllAgentInfo:output_type -> judgment2store.AgentResponse
	3,  // 17: judgment2store.ManageConfig.GetMetricsByAgentID:output_type -> judgment2store.AgentResponse
	5,  // 18: judgment2store.ManageConfig.GetMetricData:output_type -> judgment2store.MetricResponse
	7,  // 19: judgment2store.ManageConfig.GetAllAlertInfo:output_type -> judgment2store.AlertResponse
	7,  // 20: judgment2store.ManageConfig.GetAlertInfo:output_type -> judgment2store.AlertResponse
	7,  // 21: judgment2store.ManageConfig.DelAlterInfo:output_type -> judgment2store.AlertResponse
	9,  // 22: judgment2store.ManageConfig.AddConfig:output_type -> judgment2store.ConfigResponse
	9,  // 23: judgment2store.ManageConfig.UpdateConfigById:output_type -> judgment2store.ConfigResponse
	9,  // 24: judgment2store.ManageConfig.DeleteConfigById:output_type -> judgment2store.ConfigResponse
	9,  // 25: judgment2store.ManageConfig.GetConfig:output_type -> judgment2store.ConfigResponse
	9,  // 26: judgment2store.ManageConfig.GetAllConfigs:output_type -> judgment2store.ConfigResponse
	16, // [16:27] is the sub-list for method output_type
	5,  // [5:16] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_manage2store_proto_init() }
func file_manage2store_proto_init() {
	if File_manage2store_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_manage2store_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manage2store_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manage2store_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manage2store_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manage2store_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manage2store_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manage2store_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_manage2store_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_manage2store_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_manage2store_proto_goTypes,
		DependencyIndexes: file_manage2store_proto_depIdxs,
		EnumInfos:         file_manage2store_proto_enumTypes,
		MessageInfos:      file_manage2store_proto_msgTypes,
	}.Build()
	File_manage2store_proto = out.File
	file_manage2store_proto_rawDesc = nil
	file_manage2store_proto_goTypes = nil
	file_manage2store_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ManageConfigClient is the client API for ManageConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManageConfigClient interface {
	//
	// 1. 查询所有存活的Agent信息，返回结果：ip、port、local、isLive、metrics
	// 2. 根据AgentID（或IP和Local）查询Agent的所有metric
	GetAllAgentInfo(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (ManageConfig_GetAllAgentInfoClient, error)
	GetMetricsByAgentID(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (ManageConfig_GetMetricsByAgentIDClient, error)
	//
	// 1. 根据AgentID、metric、开始时间戳、结束时间戳、聚合时间获取上报的指标数据列表（流式响应）
	GetMetricData(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (ManageConfig_GetMetricDataClient, error)
	//
	// 1. 查询所有告警信息，返回一个列表（流式响应）
	// 2. 根据id删除告警信息
	// 3. 根据id获取告警信息
	// 4. 根据agentID、等级、日期、指标等查看告警信息，返回一个列表（流式响应）
	GetAllAlertInfo(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (ManageConfig_GetAllAlertInfoClient, error)
	GetAlertInfo(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (ManageConfig_GetAlertInfoClient, error)
	DelAlterInfo(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*AlertResponse, error)
	//
	// 1. 新增配置
	// 2. 根据id更新配置
	// 3. 根据id删除配置
	// 4. 根据id获取配置详情
	// 5. 获取所有的配置列表，返回一个列表（流式响应）
	// 6. 根据agentID（或ip和local）查看配置，返回一个列表（流式响应）
	AddConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	UpdateConfigById(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	DeleteConfigById(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
	GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (ManageConfig_GetConfigClient, error)
	GetAllConfigs(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (ManageConfig_GetAllConfigsClient, error)
}

type manageConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewManageConfigClient(cc grpc.ClientConnInterface) ManageConfigClient {
	return &manageConfigClient{cc}
}

func (c *manageConfigClient) GetAllAgentInfo(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (ManageConfig_GetAllAgentInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManageConfig_serviceDesc.Streams[0], "/judgment2store.ManageConfig/GetAllAgentInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageConfigGetAllAgentInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManageConfig_GetAllAgentInfoClient interface {
	Recv() (*AgentResponse, error)
	grpc.ClientStream
}

type manageConfigGetAllAgentInfoClient struct {
	grpc.ClientStream
}

func (x *manageConfigGetAllAgentInfoClient) Recv() (*AgentResponse, error) {
	m := new(AgentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageConfigClient) GetMetricsByAgentID(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (ManageConfig_GetMetricsByAgentIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManageConfig_serviceDesc.Streams[1], "/judgment2store.ManageConfig/GetMetricsByAgentID", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageConfigGetMetricsByAgentIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManageConfig_GetMetricsByAgentIDClient interface {
	Recv() (*AgentResponse, error)
	grpc.ClientStream
}

type manageConfigGetMetricsByAgentIDClient struct {
	grpc.ClientStream
}

func (x *manageConfigGetMetricsByAgentIDClient) Recv() (*AgentResponse, error) {
	m := new(AgentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageConfigClient) GetMetricData(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (ManageConfig_GetMetricDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManageConfig_serviceDesc.Streams[2], "/judgment2store.ManageConfig/GetMetricData", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageConfigGetMetricDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManageConfig_GetMetricDataClient interface {
	Recv() (*MetricResponse, error)
	grpc.ClientStream
}

type manageConfigGetMetricDataClient struct {
	grpc.ClientStream
}

func (x *manageConfigGetMetricDataClient) Recv() (*MetricResponse, error) {
	m := new(MetricResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageConfigClient) GetAllAlertInfo(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (ManageConfig_GetAllAlertInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManageConfig_serviceDesc.Streams[3], "/judgment2store.ManageConfig/GetAllAlertInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageConfigGetAllAlertInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManageConfig_GetAllAlertInfoClient interface {
	Recv() (*AlertResponse, error)
	grpc.ClientStream
}

type manageConfigGetAllAlertInfoClient struct {
	grpc.ClientStream
}

func (x *manageConfigGetAllAlertInfoClient) Recv() (*AlertResponse, error) {
	m := new(AlertResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageConfigClient) GetAlertInfo(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (ManageConfig_GetAlertInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManageConfig_serviceDesc.Streams[4], "/judgment2store.ManageConfig/GetAlertInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageConfigGetAlertInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManageConfig_GetAlertInfoClient interface {
	Recv() (*AlertResponse, error)
	grpc.ClientStream
}

type manageConfigGetAlertInfoClient struct {
	grpc.ClientStream
}

func (x *manageConfigGetAlertInfoClient) Recv() (*AlertResponse, error) {
	m := new(AlertResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageConfigClient) DelAlterInfo(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*AlertResponse, error) {
	out := new(AlertResponse)
	err := c.cc.Invoke(ctx, "/judgment2store.ManageConfig/DelAlterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageConfigClient) AddConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/judgment2store.ManageConfig/AddConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageConfigClient) UpdateConfigById(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/judgment2store.ManageConfig/UpdateConfigById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageConfigClient) DeleteConfigById(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/judgment2store.ManageConfig/DeleteConfigById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageConfigClient) GetConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (ManageConfig_GetConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManageConfig_serviceDesc.Streams[5], "/judgment2store.ManageConfig/GetConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageConfigGetConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManageConfig_GetConfigClient interface {
	Recv() (*ConfigResponse, error)
	grpc.ClientStream
}

type manageConfigGetConfigClient struct {
	grpc.ClientStream
}

func (x *manageConfigGetConfigClient) Recv() (*ConfigResponse, error) {
	m := new(ConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageConfigClient) GetAllConfigs(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (ManageConfig_GetAllConfigsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ManageConfig_serviceDesc.Streams[6], "/judgment2store.ManageConfig/GetAllConfigs", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageConfigGetAllConfigsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManageConfig_GetAllConfigsClient interface {
	Recv() (*ConfigResponse, error)
	grpc.ClientStream
}

type manageConfigGetAllConfigsClient struct {
	grpc.ClientStream
}

func (x *manageConfigGetAllConfigsClient) Recv() (*ConfigResponse, error) {
	m := new(ConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManageConfigServer is the service API for ManageConfig service.
type ManageConfigServer interface {
	//
	// 1. 查询所有存活的Agent信息，返回结果：ip、port、local、isLive、metrics
	// 2. 根据AgentID（或IP和Local）查询Agent的所有metric
	GetAllAgentInfo(*AgentRequest, ManageConfig_GetAllAgentInfoServer) error
	GetMetricsByAgentID(*AgentRequest, ManageConfig_GetMetricsByAgentIDServer) error
	//
	// 1. 根据AgentID、metric、开始时间戳、结束时间戳、聚合时间获取上报的指标数据列表（流式响应）
	GetMetricData(*MetricRequest, ManageConfig_GetMetricDataServer) error
	//
	// 1. 查询所有告警信息，返回一个列表（流式响应）
	// 2. 根据id删除告警信息
	// 3. 根据id获取告警信息
	// 4. 根据agentID、等级、日期、指标等查看告警信息，返回一个列表（流式响应）
	GetAllAlertInfo(*AlertRequest, ManageConfig_GetAllAlertInfoServer) error
	GetAlertInfo(*AlertRequest, ManageConfig_GetAlertInfoServer) error
	DelAlterInfo(context.Context, *AlertRequest) (*AlertResponse, error)
	//
	// 1. 新增配置
	// 2. 根据id更新配置
	// 3. 根据id删除配置
	// 4. 根据id获取配置详情
	// 5. 获取所有的配置列表，返回一个列表（流式响应）
	// 6. 根据agentID（或ip和local）查看配置，返回一个列表（流式响应）
	AddConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	UpdateConfigById(context.Context, *ConfigRequest) (*ConfigResponse, error)
	DeleteConfigById(context.Context, *ConfigRequest) (*ConfigResponse, error)
	GetConfig(*ConfigRequest, ManageConfig_GetConfigServer) error
	GetAllConfigs(*ConfigRequest, ManageConfig_GetAllConfigsServer) error
}

// UnimplementedManageConfigServer can be embedded to have forward compatible implementations.
type UnimplementedManageConfigServer struct {
}

func (*UnimplementedManageConfigServer) GetAllAgentInfo(*AgentRequest, ManageConfig_GetAllAgentInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllAgentInfo not implemented")
}
func (*UnimplementedManageConfigServer) GetMetricsByAgentID(*AgentRequest, ManageConfig_GetMetricsByAgentIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMetricsByAgentID not implemented")
}
func (*UnimplementedManageConfigServer) GetMetricData(*MetricRequest, ManageConfig_GetMetricDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMetricData not implemented")
}
func (*UnimplementedManageConfigServer) GetAllAlertInfo(*AlertRequest, ManageConfig_GetAllAlertInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllAlertInfo not implemented")
}
func (*UnimplementedManageConfigServer) GetAlertInfo(*AlertRequest, ManageConfig_GetAlertInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAlertInfo not implemented")
}
func (*UnimplementedManageConfigServer) DelAlterInfo(context.Context, *AlertRequest) (*AlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAlterInfo not implemented")
}
func (*UnimplementedManageConfigServer) AddConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConfig not implemented")
}
func (*UnimplementedManageConfigServer) UpdateConfigById(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigById not implemented")
}
func (*UnimplementedManageConfigServer) DeleteConfigById(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigById not implemented")
}
func (*UnimplementedManageConfigServer) GetConfig(*ConfigRequest, ManageConfig_GetConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedManageConfigServer) GetAllConfigs(*ConfigRequest, ManageConfig_GetAllConfigsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllConfigs not implemented")
}

func RegisterManageConfigServer(s *grpc.Server, srv ManageConfigServer) {
	s.RegisterService(&_ManageConfig_serviceDesc, srv)
}

func _ManageConfig_GetAllAgentInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManageConfigServer).GetAllAgentInfo(m, &manageConfigGetAllAgentInfoServer{stream})
}

type ManageConfig_GetAllAgentInfoServer interface {
	Send(*AgentResponse) error
	grpc.ServerStream
}

type manageConfigGetAllAgentInfoServer struct {
	grpc.ServerStream
}

func (x *manageConfigGetAllAgentInfoServer) Send(m *AgentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ManageConfig_GetMetricsByAgentID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManageConfigServer).GetMetricsByAgentID(m, &manageConfigGetMetricsByAgentIDServer{stream})
}

type ManageConfig_GetMetricsByAgentIDServer interface {
	Send(*AgentResponse) error
	grpc.ServerStream
}

type manageConfigGetMetricsByAgentIDServer struct {
	grpc.ServerStream
}

func (x *manageConfigGetMetricsByAgentIDServer) Send(m *AgentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ManageConfig_GetMetricData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManageConfigServer).GetMetricData(m, &manageConfigGetMetricDataServer{stream})
}

type ManageConfig_GetMetricDataServer interface {
	Send(*MetricResponse) error
	grpc.ServerStream
}

type manageConfigGetMetricDataServer struct {
	grpc.ServerStream
}

func (x *manageConfigGetMetricDataServer) Send(m *MetricResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ManageConfig_GetAllAlertInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AlertRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManageConfigServer).GetAllAlertInfo(m, &manageConfigGetAllAlertInfoServer{stream})
}

type ManageConfig_GetAllAlertInfoServer interface {
	Send(*AlertResponse) error
	grpc.ServerStream
}

type manageConfigGetAllAlertInfoServer struct {
	grpc.ServerStream
}

func (x *manageConfigGetAllAlertInfoServer) Send(m *AlertResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ManageConfig_GetAlertInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AlertRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManageConfigServer).GetAlertInfo(m, &manageConfigGetAlertInfoServer{stream})
}

type ManageConfig_GetAlertInfoServer interface {
	Send(*AlertResponse) error
	grpc.ServerStream
}

type manageConfigGetAlertInfoServer struct {
	grpc.ServerStream
}

func (x *manageConfigGetAlertInfoServer) Send(m *AlertResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ManageConfig_DelAlterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageConfigServer).DelAlterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judgment2store.ManageConfig/DelAlterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageConfigServer).DelAlterInfo(ctx, req.(*AlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageConfig_AddConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageConfigServer).AddConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judgment2store.ManageConfig/AddConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageConfigServer).AddConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageConfig_UpdateConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageConfigServer).UpdateConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judgment2store.ManageConfig/UpdateConfigById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageConfigServer).UpdateConfigById(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageConfig_DeleteConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageConfigServer).DeleteConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judgment2store.ManageConfig/DeleteConfigById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageConfigServer).DeleteConfigById(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageConfig_GetConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManageConfigServer).GetConfig(m, &manageConfigGetConfigServer{stream})
}

type ManageConfig_GetConfigServer interface {
	Send(*ConfigResponse) error
	grpc.ServerStream
}

type manageConfigGetConfigServer struct {
	grpc.ServerStream
}

func (x *manageConfigGetConfigServer) Send(m *ConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ManageConfig_GetAllConfigs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManageConfigServer).GetAllConfigs(m, &manageConfigGetAllConfigsServer{stream})
}

type ManageConfig_GetAllConfigsServer interface {
	Send(*ConfigResponse) error
	grpc.ServerStream
}

type manageConfigGetAllConfigsServer struct {
	grpc.ServerStream
}

func (x *manageConfigGetAllConfigsServer) Send(m *ConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ManageConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "judgment2store.ManageConfig",
	HandlerType: (*ManageConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelAlterInfo",
			Handler:    _ManageConfig_DelAlterInfo_Handler,
		},
		{
			MethodName: "AddConfig",
			Handler:    _ManageConfig_AddConfig_Handler,
		},
		{
			MethodName: "UpdateConfigById",
			Handler:    _ManageConfig_UpdateConfigById_Handler,
		},
		{
			MethodName: "DeleteConfigById",
			Handler:    _ManageConfig_DeleteConfigById_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllAgentInfo",
			Handler:       _ManageConfig_GetAllAgentInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMetricsByAgentID",
			Handler:       _ManageConfig_GetMetricsByAgentID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMetricData",
			Handler:       _ManageConfig_GetMetricData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllAlertInfo",
			Handler:       _ManageConfig_GetAllAlertInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAlertInfo",
			Handler:       _ManageConfig_GetAlertInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetConfig",
			Handler:       _ManageConfig_GetConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllConfigs",
			Handler:       _ManageConfig_GetAllConfigs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manage2store.proto",
}
