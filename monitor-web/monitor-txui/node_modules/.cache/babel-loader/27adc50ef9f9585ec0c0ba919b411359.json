{"remainingRequest":"/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/node_modules/babel-loader/lib/index.js!/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/src/components/SingleChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/src/components/SingleChart.vue","mtime":1644489438352},{"path":"/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/babel.config.js","mtime":1644480756276},{"path":"/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/huahaidong/Desktop/homework/tx_gdut_monitor/monitor-web/monitor-txui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"SingleChart\",\n  data: function data() {\n    return {\n      options: [{\n        value: \"30\",\n        label: \"30m\"\n      }, {\n        value: \"60\",\n        label: \"60m\"\n      }, {\n        value: \"300\",\n        label: \"5h\"\n      }, {\n        value: \"720\",\n        label: \"12h\"\n      }, {\n        value: \"1440\",\n        label: \"24h\"\n      }],\n      selector: \"30\",\n      value1: [new Date(2000, 10, 10, 10, 10), new Date(2000, 10, 11, 10, 10)],\n      value2: \"\",\n      elId: null,\n      name: 1,\n      chartTitle: null,\n      noDataTip: false,\n      config: \"\",\n      myChart: \"\",\n      runtime: [[30, 40], [40, 50], [30, 40], [45, 60], [50, 40], [30, 40], [40, 50], [30, 40], [45, 60], [80, 40], [30, 40], [45, 60], [50, 40], [30, 40], [45, 60], [50, 40], [30, 40], [45, 60], [50, 40]]\n    };\n  },\n  computed: {\n    cpu: function cpu() {\n      var cpu = [];\n\n      for (var i = 0; i < this.runtime.length; i++) {\n        cpu.push(this.runtime[i][0]);\n      }\n\n      return cpu;\n    },\n    mem: function mem() {\n      var mem = [];\n\n      for (var i = 0; i < this.runtime.length; i++) {\n        mem.push(this.runtime[i][1]);\n      }\n\n      return mem;\n    }\n  },\n  props: [\"data1\"],\n  created: function created() {},\n  watch: {\n    cpu: function cpu(val) {\n      this.drawChart();\n    },\n    mem: function mem(val) {\n      this.drawChart();\n    },\n    data1: function data1(newVal, olVal) {\n      this.cData = newVal;\n    }\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.interval);\n  },\n  methods: {\n    drawChart: function drawChart() {\n      var timeX = [];\n      var now = new Date(); // this.cpu.push(20)\n      // console.log(timeS);\n      // value = value + Math.random() * 21; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n      // console.log(cpu[index])\n\n      for (var i = 0; i < this.cpu.length; i++) {\n        var timeS = new Date(now.setMinutes(now.getMinutes() - 1));\n        var curr_date = timeS.getDate();\n        var curr_month = timeS.getMonth() + 1; // var curr_year = timeS.getFullYear();\n\n        String(curr_month).length < 2 ? curr_month = \"0\" + curr_month : curr_month;\n        String(curr_date).length < 2 ? curr_date = \"0\" + curr_date : curr_date;\n        var yyyyMMdd = curr_month + \"-\" + curr_date;\n        var curr_hour = timeS.getHours();\n\n        if (curr_hour < 10) {\n          curr_hour = \"0\" + curr_hour;\n        }\n\n        var curr_min = timeS.getMinutes();\n\n        if (curr_min < 10) {\n          curr_min = \"0\" + curr_min;\n        }\n\n        var curr_sec = timeS.getSeconds();\n\n        if (curr_sec < 10) {\n          curr_sec = \"0\" + curr_sec;\n        }\n\n        var tmp = yyyyMMdd + \"\\n\" + curr_hour + \":\" + curr_min + \":\" + curr_sec; // var tmp1 = echarts.time.format(\"MM-dd\\nhh:mm:ss\",timeS);\n        // console.log(tmp1);\n\n        timeX.unshift(tmp);\n      } // console.log(timeX);\n      // var data = this.cpu\n      // console.log(data)\n\n\n      var echarts = require(\"echarts/lib/echarts\");\n\n      var c = \"main\";\n      var myEchart = this.$echarts.init(document.getElementById(c));\n      var option = {\n        title: {\n          text: \"runtime\"\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        legend: {\n          data: [\"Cpu\", \"Mem\"]\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {},\n            restore: {}\n          }\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          axisLine: {\n            lineStyle: {\n              color: \"#a1a1a2\"\n            }\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: [\"#a1a1a2\"],\n              width: 1,\n              type: \"solid\"\n            }\n          },\n          data: timeX\n        },\n        yAxis: [{\n          type: \"value\",\n          name: \"Cpu\",\n          // show: true,\n          axisLine: {\n            lineStyle: {\n              color: \"#a1a1a2\"\n            }\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: [\"#a1a1a2\"],\n              width: 1,\n              type: \"solid\"\n            }\n          }\n        }, {\n          type: \"value\",\n          name: \"Mem\",\n          axisLabel: {\n            formatter: \"{value} %\"\n          }\n        }],\n        series: [{\n          type: \"line\",\n          name: \"Cpu\",\n          showSymbol: false,\n          data: this.cpu\n        }, {\n          type: \"line\",\n          name: \"Mem\",\n          showSymbol: false,\n          data: this.mem\n        }]\n      };\n      myEchart.setOption(option);\n    },\n    getUlId: function getUlId() {\n      console.log(\"methods\", this.elId);\n    },\n    search: function search() {\n      console.log(this.selector);\n      console.log(this.value1);\n      var time = this.value1[0].toString();\n      console.log(time);\n    } // getCpu(){\n    //   for (let i=0; i<this.runtime.length; i++) {\n    //     this.cpu.push(this.runtime[i][0])\n    //   }\n    // },\n    // getMem(){\n    //   for (let i=0; i<this.runtime.length; i++) {\n    //     this.mem.push(this.runtime[i][1])\n    //   }\n    // }\n\n  },\n  mounted: function mounted() {\n    // this.elId = guid();\n    // generateUuid().then((elId)=>{\n    //   this.elId =  elId;\n    //   console.log('create',this.elId);\n    // })\n    // console.log(this.elId);\n    // this.getUlId();\n    this.drawChart();\n  },\n  components: {}\n};",{"version":3,"mappings":"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","names":["name","data","options","value","label","selector","value1","value2","elId","chartTitle","noDataTip","config","myChart","runtime","computed","cpu","mem","props","created","watch","val","data1","destroyed","clearInterval","methods","drawChart","String","curr_month","curr_date","curr_hour","curr_min","curr_sec","timeX","title","text","tooltip","trigger","legend","grid","left","right","bottom","containLabel","toolbox","feature","saveAsImage","restore","xAxis","type","boundaryGap","axisLine","lineStyle","color","splitLine","show","width","yAxis","axisLabel","formatter","series","showSymbol","myEchart","getUlId","console","search","mounted","components"],"sourceRoot":"src/components","sources":["SingleChart.vue"],"sourcesContent":["<!--\n * @Description: \n * @Autor: yzq\n * @Date: 2022-02-08 11:20:37\n * @LastEditors: yzq\n-->\n<template>\n  <div>\n    <div class=\"nav\">\n      <div class=\"subNav\">\n        <el-select v-model=\"selector\" placeholder=\"时长\">\n          <el-option\n            v-for=\"item in options\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n          >\n          </el-option>\n        </el-select>\n        <div class=\"block\">\n          <span class=\"demonstration\"></span>\n          <el-date-picker\n            v-model=\"value1\"\n            type=\"datetimerange\"\n            range-separator=\"至\"\n            start-placeholder=\"开始日期\"\n            end-placeholder=\"结束日期\"\n            value-format=\"yyyy-MM-dd HH:mm:ss\"\n          >\n          </el-date-picker>\n        </div>\n        <el-row>\n          <el-button type=\"primary\" @click=\"search()\">\n            <div class=\"icon\">\n              搜索\n            </div>\n          </el-button>\n        </el-row>\n      </div>\n    </div>\n\n    <div class=\"single-chart\">\n      <div :name=\"name\" id=\"main\" class=\"echart\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  name: \"SingleChart\",\n  data() {\n    return {\n      options: [\n        {\n          value: \"30\",\n          label: \"30m\",\n        },\n        {\n          value: \"60\",\n          label: \"60m\",\n        },\n        {\n          value: \"300\",\n          label: \"5h\",\n        },\n        {\n          value: \"720\",\n          label: \"12h\",\n        },\n        {\n          value: \"1440\",\n          label: \"24h\",\n        },\n      ],\n      selector: \"30\",\n      value1: [new Date(2000, 10, 10, 10, 10), new Date(2000, 10, 11, 10, 10)],\n      value2: \"\",\n      elId: null,\n      name: 1,\n      chartTitle: null,\n      noDataTip: false,\n      config: \"\",\n      myChart: \"\",\n      runtime: [\n        [30, 40],\n        [40, 50],\n        [30, 40],\n        [45, 60],\n        [50, 40],\n        [30, 40],\n        [40, 50],\n        [30, 40],\n        [45, 60],\n        [80, 40],\n        [30, 40],\n        [45, 60],\n        [50, 40],\n        [30, 40],\n        [45, 60],\n        [50, 40],\n        [30, 40],\n        [45, 60],\n        [50, 40],\n      ],\n    };\n  },\n  computed: {\n    cpu: function () {\n      let cpu = [];\n      for (let i = 0; i < this.runtime.length; i++) {\n        cpu.push(this.runtime[i][0]);\n      }\n      return cpu;\n    },\n    mem: function () {\n      let mem = [];\n      for (let i = 0; i < this.runtime.length; i++) {\n        mem.push(this.runtime[i][1]);\n      }\n      return mem;\n    },\n  },\n  props: [\"data1\"],\n  created() {},\n  watch: {\n    cpu(val) {\n      this.drawChart();\n    },\n    mem(val) {\n      this.drawChart();\n    },\n    data1: function (newVal, olVal) {\n      this.cData = newVal;\n    },\n  },\n  destroyed() {\n    clearInterval(this.interval);\n  },\n  methods: {\n    drawChart() {\n      var timeX = [];\n      const now = new Date();\n      // this.cpu.push(20)\n      // console.log(timeS);\n      // value = value + Math.random() * 21; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n      // console.log(cpu[index])\n      for (let i = 0; i < this.cpu.length; i++) {\n        let timeS = new Date(now.setMinutes(now.getMinutes() - 1));\n        var curr_date = timeS.getDate();\n        var curr_month = timeS.getMonth() + 1;\n        // var curr_year = timeS.getFullYear();\n        String(curr_month).length < 2\n          ? (curr_month = \"0\" + curr_month)\n          : curr_month;\n        String(curr_date).length < 2\n          ? (curr_date = \"0\" + curr_date)\n          : curr_date;\n        var yyyyMMdd = curr_month + \"-\" + curr_date;\n        var curr_hour = timeS.getHours();\n        if (curr_hour < 10) {\n          curr_hour = \"0\" + curr_hour;\n        }\n        var curr_min = timeS.getMinutes();\n        if (curr_min < 10) {\n          curr_min = \"0\" + curr_min;\n        }\n        var curr_sec = timeS.getSeconds();\n        if (curr_sec < 10) {\n          curr_sec = \"0\" + curr_sec;\n        }\n        var tmp = yyyyMMdd + \"\\n\" + curr_hour + \":\" + curr_min + \":\" + curr_sec;\n        // var tmp1 = echarts.time.format(\"MM-dd\\nhh:mm:ss\",timeS);\n        // console.log(tmp1);\n        timeX.unshift(tmp);\n      }\n      // console.log(timeX);\n      // var data = this.cpu\n      // console.log(data)\n      const echarts = require(\"echarts/lib/echarts\");\n      let c = \"main\";\n      let myEchart = this.$echarts.init(document.getElementById(c));\n\n      let option = {\n        title: {\n          text: \"runtime\",\n        },\n        tooltip: {\n          trigger: \"axis\",\n        },\n        legend: {\n          data: [\"Cpu\", \"Mem\"],\n        },\n        grid: {\n          left: \"3%\",\n          right: \"4%\",\n          bottom: \"3%\",\n          containLabel: true,\n        },\n        toolbox: {\n          feature: {\n            saveAsImage: {},\n            restore: {},\n          },\n        },\n        xAxis: {\n          type: \"category\",\n\n          boundaryGap: false,\n          axisLine: {\n            lineStyle: {\n              color: \"#a1a1a2\",\n            },\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: [\"#a1a1a2\"],\n              width: 1,\n              type: \"solid\",\n            },\n          },\n          data: timeX,\n        },\n        yAxis: [\n          {\n            type: \"value\",\n            name: \"Cpu\",\n            // show: true,\n            axisLine: {\n              lineStyle: {\n                color: \"#a1a1a2\",\n              },\n            },\n            splitLine: {\n              show: true,\n              lineStyle: {\n                color: [\"#a1a1a2\"],\n                width: 1,\n                type: \"solid\",\n              },\n            },\n          },\n          {\n            type: \"value\",\n            name: \"Mem\",\n            axisLabel: {\n              formatter: \"{value} %\",\n            },\n          },\n        ],\n        series: [\n          {\n            type: \"line\",\n            name: \"Cpu\",\n            showSymbol: false,\n            data: this.cpu,\n          },\n          {\n            type: \"line\",\n            name: \"Mem\",\n            showSymbol: false,\n            data: this.mem,\n          },\n        ],\n      };\n      myEchart.setOption(option);\n    },\n    getUlId() {\n      console.log(\"methods\", this.elId);\n    },\n    search(){\n      console.log(this.selector);\n      console.log(this.value1);\n      let time = this.value1[0].toString();\n      console.log(time);\n    }\n    // getCpu(){\n    //   for (let i=0; i<this.runtime.length; i++) {\n    //     this.cpu.push(this.runtime[i][0])\n    //   }\n    // },\n    // getMem(){\n    //   for (let i=0; i<this.runtime.length; i++) {\n    //     this.mem.push(this.runtime[i][1])\n    //   }\n    // }\n  },\n  mounted() {\n    // this.elId = guid();\n    // generateUuid().then((elId)=>{\n    //   this.elId =  elId;\n    //   console.log('create',this.elId);\n    // })\n    // console.log(this.elId);\n    // this.getUlId();\n    this.drawChart();\n  },\n  components: {},\n};\n</script>\n\n<style scoped>\n#main {\n  width: 700px;\n  height: 500px;\n  margin: auto;\n}\n.nav {\n  width: 100vw;\n  height: 100px;\n  margin: auto;\n}\n.subNav {\n  display: flex;\n  float: left;\n  width: 100%;\n  justify-content: center;\n}\n.block{\n  margin-left: 10px;\n  margin-right: 10px;\n}\n</style>\n"]}]}